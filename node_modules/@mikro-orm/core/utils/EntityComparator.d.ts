import { AnyEntity, EntityData, EntityMetadata, EntityProperty, IMetadataStorage } from '../typings';
import { Platform } from '../platforms';
export declare class EntityComparator {
    private readonly metadata;
    private readonly platform;
    constructor(metadata: IMetadataStorage, platform: Platform);
    /**
     * Computes difference between two entities. First calls `prepareEntity` on both, then uses the `diff` method.
     */
    diffEntities<T extends AnyEntity<T>>(a: T, b: T): EntityData<T>;
    /**
     * Removes ORM specific code from entities and prepares it for serializing. Used before change set computation.
     * References will be mapped to primary keys, collections to arrays of primary keys.
     */
    prepareEntity<T extends AnyEntity<T>>(entity: T): EntityData<T>;
    /**
     * should be used only for `meta.comparableProps` that are defined based on the static `isComparable` helper
     */
    private shouldIgnoreProperty;
    /**
     * perf: used to generate list of comparable properties during discovery, so we speed up the runtime comparison
     */
    static isComparable<T extends AnyEntity<T>>(prop: EntityProperty<T>, root: EntityMetadata): boolean;
}
