import { EntityManager } from '../EntityManager';
import { AnyEntity, Dictionary, EntityData, EntityMetadata, Populate, Primary } from '../typings';
import { IdentifiedReference } from './Reference';
import { AssignOptions } from './EntityAssigner';
import { LockMode } from '../enums';
import { Platform } from '../platforms/Platform';
export declare class WrappedEntity<T extends AnyEntity<T>, PK extends keyof T> {
    private readonly entity;
    __initialized: boolean;
    __populated?: boolean;
    __lazyInitialized?: boolean;
    __managed?: boolean;
    __em?: EntityManager;
    /** holds last entity data snapshot so we can compute changes when persisting managed entities */
    __originalEntityData?: EntityData<T>;
    /** holds wrapped primary key so we can compute change set without eager commit */
    __identifier?: EntityData<T>;
    constructor(entity: T);
    isInitialized(): boolean;
    populated(populated?: boolean): void;
    toReference(): IdentifiedReference<T, PK>;
    toObject(ignoreFields?: string[]): EntityData<T>;
    toJSON(...args: any[]): EntityData<T> & Dictionary;
    assign(data: EntityData<T>, options?: AssignOptions): T;
    init<P extends Populate<T> = Populate<T>>(populated?: boolean, populate?: P, lockMode?: LockMode): Promise<T>;
    hasPrimaryKey(): boolean;
    get __meta(): EntityMetadata<T>;
    get __platform(): Platform;
    get __primaryKey(): Primary<T>;
    set __primaryKey(id: Primary<T>);
    get __primaryKeys(): Primary<T>[];
    get __serializedPrimaryKey(): Primary<T> | string;
}
